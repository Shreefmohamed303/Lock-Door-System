/********************************************************************************
 * Module : LCD
 *
 * File Name : lcd.c
 *
 * Description : Header File For Keypad Driver
 *
 * Author : Shreef Mohamed
 *
 * Created on: Sep 20, 2018
 *
 ********************************************************************************/


#include "lcd.h"

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
	/*Configure the control pins (RS,RW,E) as output pins */
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW) ;

    #if (DATA_BITS_MODE==4)
        #ifdef UPPER_PORT_PINS
	        /* Configure the highest 4 bits of the data port as output pins */
	        LCD_DATA_PORT_DIR |= 0xF0 ;
        #else
	        /* Configure the lowest 4 bits of the data port as output pins */
	        LCD_DATA_PORT_DIR |= 0x0F;
        #endif
	    LCD_SendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
	    /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
	    LCD_SendCommand(TWO_LINE_LCD_FOUR_BIT_MODE);

    #elif (DATA_BITS_MODE==8)
	    LCD_DATA_PORT_DIR = 0xFF ; /* Configure the data port as output port */
	    /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
	    LCD_SendCommand (TWO_LINE_LCD_EIGHT_BIT_MODE) ;
    #endif

	LCD_SendCommand (CURSOR_OFF); /* cursor off */
	LCD_SendCommand (CLEAR_COMMAND) ; /* Clear LCD at the beginning */
}

void LCD_sendCommand(uint8 command)
{
	CLEAR_BIT(LCD_CTRL_PORT,RS);   /* Instruction Mode RS=0 */
	CLEAR_BIT(LCD_CTRL_PORT,RW);  /* write data to LCD so RW=0 */
	_delay_ms(1);   /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E);  /* Enable LCD E=1 */
	_delay_ms(1);   /* delay for processing Tpw - Tdws = 190ns */
#if (DATA_BITS_MODE == 4)

     /* out the highest (Most - left) 4 bits of the required command to the data bus D4 --> D7 */
   #ifdef UPPER_PORT_PINS
     /*
      * there is a different between (upper and lower) PORT pins
      * as the data will be saved at the Most (left) then least (right) at lcd memory
      */
      LCD_DATA_PORT=(LCD_DATA_PORT & 0x0F) | (command & 0xF0) ;
   #else
      LCD_DATA_PORT=(LCD_DATA_PORT & 0xF0) | ((command & 0xF0) >> 4);
   #endif

     _delay_ms(1);  /* delay for processing Tdsw = 100ns */
     CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
     _delay_ms(1);  /* delay for processing Th = 13ns */
     SET_BIT(LCD_CTRL_PORT,E);  /* Enable LCD E=1 */
     _delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

     /* out the lowest (Right) 4 bits of the required command to the data bus D4 --> D7 */
   #ifdef UPPER_PORT_PINS
      LCD_DATA_PORT=(LCD_DATA_PORT & 0x0F) | ((command & 0x0F) << 4) ;
   #else
      LCD_DATA_PORT=(LCD_DATA_PORT & 0xF0) | (command & 0x0F);
   #endif

      _delay_ms(1);  /* delay for processing Tdsw = 100ns */
      CLEAR_BIT(LCD_CTRL_PORT,E);  /* disable LCD E=0 */
      _delay_ms(1);  /* delay for processing Th = 13ns */

#elif (DATA_BITS_MODE == 8)
	LCD_DATA_PORT=command ;   /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1);  /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E);  /* disable LCD E=0 */
	_delay_ms(1);  /* delay for processing Th = 13ns */
#endif

}


void LCD_displayCharacter (uint8 data)
{
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
#if (DATA_BITS_MODE == 4)

	/* out the highest (left / Most) 4 bits of the required data to the data bus D4 --> D7 */
  #ifdef UPPER_PORT_PINS
	/*
	 * there is a different between (upper and lower) PORT pins
	 * as the data will be saved at the Most (left) then least (right) at lcd memory
	 */
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (data & 0xF0);
  #else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((data & 0xF0) >> 4);
  #endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	/* out the lowest (Right) 4 bits of the required data to the data bus D4 --> D7 */
  #ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((data & 0x0F) << 4);
  #else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (data & 0x0F);
  #endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#elif (DATA_BITS_MODE == 8)
	LCD_DATA_PORT = data; /* out the required data to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}

void LCD_displayString (const uint8 *str)
{
	uint8 i=0;
	while (str[i] !='\0')
	{
		LCD_displayCharacter(str[i]);
		i++ ;
	}

	/***************** Another Method ***********************
	while((*Str) != '\0')
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
    *********************************************************/
}

void LCD_GoToRowColumn (uint8 row , uint8 col)
{
	uint8 Address;

	/* first of all calculate the required address */
	switch(row)
	{
		case 0:	Address=col;
				break;
		case 1:	Address=col+0x40;
				break;
		case 2:	Address=col+0x10;
				break;
		case 3:	Address=col+0x50;
				break;
	}
	/* to write to a specific address in the LCD
	 * (0b1) + (location or address that you want to write in )
	 * the 1st (0b1) is responsible to set the cursor
	 * So we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION);
}

void LCD_displayStringRowColumn (uint8 row , uint8 col , const uint8 *str)
{
	LCD_goToRowColumn (row,col);   /* go to to the required LCD position */
	LCD_displayString(str);      /* display the string */
}

void LCD_intgerToString(int data)
{
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
   LCD_sisplayString(buff);
}

void LCD_clearScreen (void)
{
	LCD_SendCommand (CLEAR_COMMAND) ; /* Clear Display */
}
